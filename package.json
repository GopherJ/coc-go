{
  "name": "coc-go",
  "version": "0.12.1",
  "description": "gopls extension for coc",
  "author": "Josa Gesell <josa@gesell.me>",
  "license": "MIT",
  "main": "lib/extension.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/josa42/coc-go.git"
  },
  "engines": {
    "coc": "^0.0.73",
    "node": ">=10"
  },
  "keywords": [
    "coc.nvim",
    "languageserver",
    "gopls",
    "go",
    "golang",
    "vim",
    "neovim"
  ],
  "scripts": {
    "test": "true || mocha --require ts-node/register '**/*.test.ts'",
    "test:watch": "mocha --watch --watch-files '**/*.ts' --require ts-node/register '**/*.test.ts'",
    "clean": "rimraf lib",
    "build": "tsc -p tsconfig.json",
    "build:watch": "tsc --watch -p tsconfig.json",
    "prepare": "yarn clean && yarn build",
    "link:add": "node ./scripts/link.js add",
    "link:remove": "node ./scripts/link.js remove",
    "update": "yarn run update:snippets && yarn run update:options && yarn run update:readme && yarn run update:readme",
    "update:snippets": "./scripts/update-snippets.js",
    "update:options": "./scripts/update-options.sh && node ./scripts/update-options-interface.js",
    "update:commands": "./scripts/update-commands.js",
    "update:readme": "./scripts/update-tables.sh",
    "lint": "eslint . --ext .ts,.js",
    "link": "coc-dev link",
    "unlink": "coc-dev unlink",
    "format": "prettier --parser typescript --write \"src/**/*.ts\""
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 80,
    "semi": false
  },
  "activationEvents": [
    "onLanguage:go",
    "onLanguage:gomod",
    "onCommand:go.install.gomodifytags",
    "onCommand:go.install.goplay",
    "onCommand:go.install.gopls",
    "onCommand:go.install.gotests",
    "onCommand:go.install.impl",
    "onCommand:go.install.tools",
    "onCommand:go.version"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "go",
        "patterns": [
          "go.mod"
        ]
      },
      {
        "filetype": "gomod",
        "patterns": [
          "go.mod"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "gols",
      "properties": {
        "go.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable Go extension"
        },
        "go.trace.server": {
          "type": "string",
          "default": "off",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "description": "Trace level of gopls"
        },
        "go.goplsPath": {
          "type": "string",
          "description": "Path to `gopls` bin (Change requires `:CocRestart`)"
        },
        "go.goplsArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments passed to `gopls` (Change requires `:CocRestart`)"
        },
        "go.goplsEnv": {
          "type": "object",
          "patternProperties": {
            "^.+$": {
              "type": "string"
            }
          },
          "description": "ENV passed to `gopls` (Change requires `:CocRestart`)"
        },
        "go.goplsUseDaemon": {
          "type": "boolean",
          "default": true,
          "description": "Run gopls as daemon"
        },
        "go.disable": {
          "type": "object",
          "description": "Disable gopls features",
          "default": {},
          "properties": {
            "workspaceFolders": {
              "type": "boolean",
              "default": false,
              "description": "Disable workspaceFolders feature (Change requires `:CocRestart`)"
            },
            "diagnostics": {
              "type": "boolean",
              "default": false,
              "description": "Disable handle diagnostics (Change requires `:CocRestart`)"
            },
            "completion": {
              "type": "boolean",
              "default": false,
              "description": "Disable completion feature (Change requires `:CocRestart`)"
            }
          }
        },
        "go.goplsOptions": {
          "type": "object",
          "description": "See `gopls` documentation: https://github.com/golang/tools/blob/master/gopls/doc/settings.md",
          "properties": {
            "analyses": {
              "type": "object",
              "description": "analyses specify analyses that the user would like to enable or disable.\nA map of the names of analysis passes that should be enabled/disabled.\nA full list of analyzers that gopls uses can be found [here](analyzers.md)\n\nExample Usage:\n```json5\n...\n\"analyses\": {\n  \"unreachable\": false, // Disable the unreachable analyzer.\n  \"unusedparams\": true  // Enable the unusedparams analyzer.\n}\n...\n```\n",
              "additionalProperties": false,
              "properties": {
                "asmdecl": {
                  "type": "boolean",
                  "default": true
                },
                "assign": {
                  "type": "boolean",
                  "default": true
                },
                "atomic": {
                  "type": "boolean",
                  "default": true
                },
                "atomicalign": {
                  "type": "boolean",
                  "default": true
                },
                "bools": {
                  "type": "boolean",
                  "default": true
                },
                "buildtag": {
                  "type": "boolean",
                  "default": true
                },
                "cgocall": {
                  "type": "boolean",
                  "default": true
                },
                "composites": {
                  "type": "boolean",
                  "default": true
                },
                "copylock": {
                  "type": "boolean",
                  "default": true
                },
                "errorsas": {
                  "type": "boolean",
                  "default": true
                },
                "httpresponse": {
                  "type": "boolean",
                  "default": true
                },
                "loopclosure": {
                  "type": "boolean",
                  "default": true
                },
                "lostcancel": {
                  "type": "boolean",
                  "default": true
                },
                "nilfunc": {
                  "type": "boolean",
                  "default": true
                },
                "printf": {
                  "type": "boolean",
                  "default": true
                },
                "shift": {
                  "type": "boolean",
                  "default": true
                },
                "stdmethods": {
                  "type": "boolean",
                  "default": true
                },
                "structtag": {
                  "type": "boolean",
                  "default": true
                },
                "tests": {
                  "type": "boolean",
                  "default": true
                },
                "unmarshal": {
                  "type": "boolean",
                  "default": true
                },
                "unreachable": {
                  "type": "boolean",
                  "default": true
                },
                "unsafeptr": {
                  "type": "boolean",
                  "default": true
                },
                "unusedresult": {
                  "type": "boolean",
                  "default": true
                },
                "deepequalerrors": {
                  "type": "boolean",
                  "default": true
                },
                "fieldalignment": {
                  "type": "boolean",
                  "default": false
                },
                "fillreturns": {
                  "type": "boolean",
                  "default": false
                },
                "nonewvars": {
                  "type": "boolean",
                  "default": false
                },
                "noresultvalues": {
                  "type": "boolean",
                  "default": true
                },
                "simplifycompositelit": {
                  "type": "boolean",
                  "default": true
                },
                "simplifyrange": {
                  "type": "boolean",
                  "default": true
                },
                "shadow": {
                  "type": "boolean",
                  "default": false
                },
                "simplifyslice": {
                  "type": "boolean",
                  "default": true
                },
                "sortslice": {
                  "type": "boolean",
                  "default": true
                },
                "testinggoroutine": {
                  "type": "boolean",
                  "default": true
                },
                "undeclaredname": {
                  "type": "boolean",
                  "default": false
                },
                "unusedparams": {
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "buildFlags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "buildFlags is the set of flags passed on to the build system when invoked.\nIt is applied to queries like `go list`, which is used when discovering files.\nThe most common use is to set `-tags`.\n"
            },
            "codelenses": {
              "type": "object",
              "description": "codelenses overrides the enabled/disabled state of code lenses. See the \"Code Lenses\"\nsection of settings.md for the list of supported lenses.\n\nExample Usage:\n```json5\n\"gopls\": {\n...\n  \"codelenses\": {\n    \"generate\": false,  // Don't show the `go generate` lens.\n    \"gc_details\": true  // Show a code lens toggling the display of gc's choices.\n  }\n...\n}\n```\n",
              "additionalProperties": false,
              "properties": {
                "gc_details": {
                  "type": "boolean",
                  "default": false
                },
                "generate": {
                  "type": "boolean",
                  "default": true
                },
                "regenerate_cgo": {
                  "type": "boolean",
                  "default": true
                },
                "tidy": {
                  "type": "boolean",
                  "default": true
                },
                "upgrade_dependency": {
                  "type": "boolean",
                  "default": true
                },
                "vendor": {
                  "type": "boolean",
                  "default": true
                }
              }
            },
            "directoryFilters": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "directoryFilters can be used to exclude unwanted directories from the\nworkspace. By default, all directories are included. Filters are an\noperator, `+` to include and `-` to exclude, followed by a path prefix\nrelative to the workspace folder. They are evaluated in order, and\nthe last filter that applies to a path controls whether it is included.\nThe path prefix can be empty, so an initial `-` excludes everything.\n\nExamples:\nExclude node_modules: `-node_modules`\nInclude only project_a: `-` (exclude everything), `+project_a`\nInclude only project_a, but not node_modules inside it: `-`, `+project_a`, `-project_a/node_modules`\n"
            },
            "env": {
              "type": "object",
              "patternProperties": {
                ".+": {
                  "type": "string"
                }
              },
              "description": "env adds environment variables to external commands run by `gopls`, most notably `go list`.\n"
            },
            "gofumpt": {
              "type": "boolean",
              "default": false,
              "description": "gofumpt indicates if we should run gofumpt formatting.\n"
            },
            "hoverKind": {
              "type": "string",
              "enum": [
                "FullDocumentation",
                "NoDocumentation",
                "SingleLine",
                "Structured",
                "SynopsisDocumentation"
              ],
              "default": "FullDocumentation",
              "description": "hoverKind controls the information that appears in the hover text.\nSingleLine and Structured are intended for use only by authors of editor plugins.\nMust be one of:\n\n * `\"FullDocumentation\"`\n * `\"NoDocumentation\"`\n * `\"SingleLine\"`\n * `\"Structured\"` is an experimental setting that returns a structured hover format.\nThis format separates the signature from the documentation, so that the client\ncan do more manipulation of these fields.\\\nThis should only be used by clients that support this behavior.\n\n * `\"SynopsisDocumentation\"`\n"
            },
            "importShortcut": {
              "type": "string",
              "enum": [
                "Both",
                "Definition",
                "Link"
              ],
              "default": "Both",
              "description": "importShortcut specifies whether import statements should link to\ndocumentation or go to definitions.\nMust be one of:\n\n * `\"Both\"`\n * `\"Definition\"`\n * `\"Link\"`\n"
            },
            "linksInHover": {
              "type": "boolean",
              "default": true,
              "description": "linksInHover toggles the presence of links to documentation in hover.\n"
            },
            "linkTarget": {
              "type": "string",
              "default": "pkg.go.dev",
              "description": "linkTarget controls where documentation links go.\nIt might be one of:\n\n* `\"godoc.org\"`\n* `\"pkg.go.dev\"`\n\nIf company chooses to use its own `godoc.org`, its address can be used as well.\n"
            },
            "local": {
              "type": "string",
              "default": "",
              "description": "local is the equivalent of the `goimports -local` flag, which puts imports beginning with this string after 3rd-party packages.\nIt should be the prefix of the import path whose imports should be grouped separately.\n"
            },
            "matcher": {
              "type": "string",
              "enum": [
                "CaseInsensitive",
                "CaseSensitive",
                "Fuzzy"
              ],
              "default": "Fuzzy",
              "description": "matcher sets the algorithm that is used when calculating completion candidates.\nMust be one of:\n\n * `\"CaseInsensitive\"`\n * `\"CaseSensitive\"`\n * `\"Fuzzy\"`\n"
            },
            "symbolMatcher": {
              "type": "string",
              "enum": [
                "CaseInsensitive",
                "CaseSensitive",
                "Fuzzy"
              ],
              "default": "Fuzzy",
              "description": "symbolMatcher sets the algorithm that is used when finding workspace symbols.\nMust be one of:\n\n * `\"CaseInsensitive\"`\n * `\"CaseSensitive\"`\n * `\"Fuzzy\"`\n"
            },
            "symbolStyle": {
              "type": "string",
              "enum": [
                "Dynamic",
                "Full",
                "Package"
              ],
              "default": "Dynamic",
              "description": "symbolStyle controls how symbols are qualified in symbol responses.\n\nExample Usage:\n```json5\n\"gopls\": {\n...\n  \"symbolStyle\": \"dynamic\",\n...\n}\n```\nMust be one of:\n\n * `\"Dynamic\"` uses whichever qualifier results in the highest scoring\nmatch for the given symbol query. Here a \"qualifier\" is any \"/\" or \".\"\ndelimited suffix of the fully qualified symbol. i.e. \"to/pkg.Foo.Field\" or\njust \"Foo.Field\".\n\n * `\"Full\"` is fully qualified symbols, i.e.\n\"path/to/pkg.Foo.Field\".\n\n * `\"Package\"` is package qualified symbols i.e.\n\"pkg.Foo.Field\".\n"
            },
            "usePlaceholders": {
              "type": "boolean",
              "default": false,
              "description": "placeholders enables placeholders for function parameters or struct fields in completion responses.\n"
            },
            "allowImplicitNetworkAccess": {
              "type": "boolean",
              "default": false,
              "description": "[EXPERIMENTAL] allowImplicitNetworkAccess disables GOPROXY=off, allowing implicit module\ndownloads rather than requiring user action. This option will eventually\nbe removed.\n"
            },
            "allowModfileModifications": {
              "type": "boolean",
              "default": false,
              "description": "[EXPERIMENTAL] allowModfileModifications disables -mod=readonly, allowing imports from\nout-of-scope modules. This option will eventually be removed.\n"
            },
            "annotations": {
              "type": "object",
              "patternProperties": {
                ".+": {
                  "type": "boolean"
                }
              },
              "description": "[EXPERIMENTAL] annotations suppress various kinds of optimization diagnostics\nthat would be reported by the gc_details command.\n * noNilcheck suppresses display of nilchecks.\n * noEscape suppresses escape choices.\n * noInline suppresses inlining choices.\n * noBounds suppresses bounds checking diagnostics.\n"
            },
            "expandWorkspaceToModule": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] expandWorkspaceToModule instructs `gopls` to adjust the scope of the\nworkspace to find the best available module root. `gopls` first looks for\na go.mod file in any parent directory of the workspace folder, expanding\nthe scope to that directory if it exists. If no viable parent directory is\nfound, gopls will check if there is exactly one child directory containing\na go.mod file, narrowing the scope to that directory if it exists.\n"
            },
            "experimentalDiagnosticsDelay": {
              "type": "string",
              "default": "250ms",
              "description": "[EXPERIMENTAL] experimentalDiagnosticsDelay controls the amount of time that gopls waits\nafter the most recent file modification before computing deep diagnostics.\nSimple diagnostics (parsing and type-checking) are always run immediately\non recently modified packages.\n\nThis option must be set to a valid duration string, for example `\"250ms\"`.\n"
            },
            "experimentalPackageCacheKey": {
              "type": "boolean",
              "default": true,
              "description": "[EXPERIMENTAL] experimentalPackageCacheKey controls whether to use a coarser cache key\nfor package type information to increase cache hits. This setting removes\nthe user's environment, build flags, and working directory from the cache\nkey, which should be a safe change as all relevant inputs into the type\nchecking pass are already hashed into the key. This is temporarily guarded\nby an experiment because caching behavior is subtle and difficult to\ncomprehensively test.\n"
            },
            "experimentalWorkspaceModule": {
              "type": "boolean",
              "default": false,
              "description": "[EXPERIMENTAL] experimentalWorkspaceModule opts a user into the experimental support\nfor multi-module workspaces.\n"
            },
            "semanticTokens": {
              "type": "boolean",
              "default": false,
              "description": "[EXPERIMENTAL] semanticTokens controls whether the LSP server will send\nsemantic tokens to the client.\n"
            },
            "staticcheck": {
              "type": "boolean",
              "default": false,
              "description": "[EXPERIMENTAL] staticcheck enables additional analyses from staticcheck.io.\n"
            }
          }
        },
        "go.tags": {
          "type": "object",
          "properties": {
            "tags": {
              "type": "string",
              "default": "json",
              "description": "Comma separated tags to be used by `go.tags.add` command"
            },
            "options": {
              "type": "string",
              "default": "json=omitempty",
              "description": "Comma separated tag=options pairs to be used by `go.tags.add` command"
            },
            "transform": {
              "type": "string",
              "enum": [
                "snakecase",
                "camelcase"
              ],
              "default": "snakecase",
              "description": "Transformation rule used by `go.tags.add` command to add tags"
            },
            "skipUnexported": {
              "type": "boolean",
              "default": false,
              "description": "If true, skip unexported fields"
            }
          }
        },
        "go.tests": {
          "type": "object",
          "properties": {
            "generateFlags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "description": "Additional command line flags to pass to `gotests` for generating tests."
            }
          }
        },
        "go.debug.vimspector.configuration.name": {
            "type": "string",
            "default": "launch",
            "description": "Specify the name of the vimspector configuration name. The following args will be passed to the configuration: `TestIdentifier`"
        },
        "go.checkForUpdates": {
          "description": "[EXPERIMENTAL] Check for gopls updates on start.",
          "type": "string",
          "default": "disabled",
          "enum": [
            "disabled",
            "inform",
            "ask",
            "install"
          ]
        }
      }
    },
    "commands": [
      {
        "title": "Generate interface stubs",
        "category": "Go",
        "command": "go.impl.cursor"
      },
      {
        "title": "Install / update gomodifytags",
        "category": "Go",
        "command": "go.install.gomodifytags"
      },
      {
        "title": "Install / update goplay",
        "category": "Go",
        "command": "go.install.goplay"
      },
      {
        "title": "Install / update gopls",
        "category": "Go",
        "command": "go.install.gopls"
      },
      {
        "title": "Install / update gotests",
        "category": "Go",
        "command": "go.install.gotests"
      },
      {
        "title": "Install / update impl",
        "category": "Go",
        "command": "go.install.impl"
      },
      {
        "title": "Install / update all tools",
        "category": "Go",
        "command": "go.install.tools"
      },
      {
        "title": "Run on go playground",
        "category": "Go",
        "command": "go.playground"
      },
      {
        "title": "Add tags to struct fields",
        "category": "Go",
        "command": "go.tags.add"
      },
      {
        "title": "Add tags to struct field in current line",
        "category": "Go",
        "command": "go.tags.add.line"
      },
      {
        "title": "Add tags to struct fields (prompt)",
        "category": "Go",
        "command": "go.tags.add.prompt"
      },
      {
        "title": "Remove all tags from struct fields",
        "category": "Go",
        "command": "go.tags.clear"
      },
      {
        "title": "Remove all tags from struct fields in current line",
        "category": "Go",
        "command": "go.tags.clear.line"
      },
      {
        "title": "Remove tags from struct fields",
        "category": "Go",
        "command": "go.tags.remove"
      },
      {
        "title": "Remove tags from struct field in current line",
        "category": "Go",
        "command": "go.tags.remove.line"
      },
      {
        "title": "Remove tags from struct fields (prompt)",
        "category": "Go",
        "command": "go.tags.remove.prompt"
      },
      {
        "title": "Generate unit tests for exported functions in file",
        "category": "Go",
        "command": "go.test.generate.exported"
      },
      {
        "title": "Generate unit tests for file",
        "category": "Go",
        "command": "go.test.generate.file"
      },
      {
        "title": "Generate unit tests for current function",
        "category": "Go",
        "command": "go.test.generate.function"
      },
      {
        "title": "Toggle test file",
        "category": "Go",
        "command": "go.test.toggle"
      },
      {
        "title": "Debug nearest test function using vimspector",
        "category": "Go",
        "command": "go.debug.test.nearest"
      },
      {
        "title": "Print extension version",
        "category": "Go",
        "command": "go.version"
      }
    ],
    "snippets": [
      {
        "language": "go",
        "path": "./snippets/go.json"
      },
      {
        "language": "gomod",
        "path": "./snippets/gomod.json"
      }
    ]
  },
  "devDependencies": {
    "@types/mocha": "^8.0.3",
    "@types/node": "^14.11.1",
    "@types/node-fetch": "^2.5.7",
    "@types/tmp": "^0.2.0",
    "@types/which": "^1.3.2",
    "@typescript-eslint/eslint-plugin": "^4.1.1",
    "@typescript-eslint/parser": "^4.1.1",
    "coc-dev-tools": "^0.1.0",
    "coc.nvim": "0.0.79",
    "eslint": "^7.9.0",
    "prettier": "^2.2.0",
    "eslint-config-josa-typescript": "^0.1.2",
    "mocha": "^8.1.3",
    "rimraf": "^3.0.2",
    "tmp": "^0.2.1",
    "ts-node": "^9.0.0",
    "typescript": "~4.1.2"
  },
  "dependencies": {
    "node-fetch": "^2.6.1",
    "tslib": "^2.0.0",
    "vscode-uri": "^2.1.2",
    "which": "^2.0.2"
  }
}
